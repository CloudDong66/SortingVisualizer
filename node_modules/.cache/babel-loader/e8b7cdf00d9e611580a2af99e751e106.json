{"ast":null,"code":"var _jsxFileName = \"/Users/clouddong/Dev/sorting_visualizer/src/SortingVisualizer/SortingVisualizer.jsx\";\nimport { Component } from 'react';\nimport './SortingVisualizer.css';\nimport * as sortingAlgorithms from '../sortingAlgorithms/sortingAlgorithms';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class SortingVisualizer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: []\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < 310; i++) {\n      array.push(randomIntFromInterval(5, 700));\n    }\n\n    this.setState({\n      array\n    });\n  }\n\n  mergeSort() {\n    const javaScriptSortedArray = this.state.array.slice().sort((a, b) => a - b);\n    const sortedArray = sortingAlgorithms.mergeSort(this.state.array); // console.log(this.state.array)\n    // console.log(sortedArray)\n    // console.log(javaScriptSortedArray)\n\n    console.log(arraysAreEqual(javaScriptSortedArray, sortedArray));\n  }\n\n  quickSort() {}\n\n  heapSort() {}\n\n  bubbleSort() {}\n\n  testSortingAlgorithms() {\n    for (let i = 0; i < 100; i++) {\n      const array = [];\n      const length = randomIntFromInterval(1, 1000);\n\n      for (let i = 0; i < length; i++) {\n        array.push(randomIntFromInterval(-1000, 1000));\n      }\n\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n      const mergeSortedArray = sortingAlgorithms.mergeSort(array.slice());\n      console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\n    }\n  }\n\n  render() {\n    const {\n      array\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"array-container\",\n      children: [array.map((value, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"array-bar\",\n        style: {\n          height: `${value}px`\n        }\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"btn\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"reset\",\n          onClick: () => this.resetArray(),\n          children: \"Generate New Array\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"mergeSort\",\n          onClick: () => this.mergeSort(),\n          children: \"Merge Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"quickSort\",\n          onClick: () => this.quickSort(),\n          children: \"Quick Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"heapSort\",\n          onClick: () => this.heapSort(),\n          children: \"Heap Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"bubbleSort\",\n          onClick: () => this.bubbleSort(),\n          children: \"Bubble Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nfunction randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) return false;\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/Users/clouddong/Dev/sorting_visualizer/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["Component","sortingAlgorithms","SortingVisualizer","constructor","props","state","array","componentDidMount","resetArray","i","push","randomIntFromInterval","setState","mergeSort","javaScriptSortedArray","slice","sort","a","b","sortedArray","console","log","arraysAreEqual","quickSort","heapSort","bubbleSort","testSortingAlgorithms","length","mergeSortedArray","render","map","value","idx","height","min","max","Math","floor","random","arrayOne","arrayTwo"],"mappings":"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","sourcesContent":["import { Component } from 'react';\nimport './SortingVisualizer.css';\nimport * as sortingAlgorithms from '../sortingAlgorithms/sortingAlgorithms'\n\nexport default class SortingVisualizer extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            array: [],\n        };\n    }\n\n    componentDidMount() {\n        this.resetArray();\n    }\n\n    resetArray() {\n        const array = [];\n        for (let i = 0; i < 310; i++) {\n            array.push(randomIntFromInterval(5,700));\n        }\n        this.setState({array});\n    }\n\n    mergeSort() {\n        const javaScriptSortedArray = this.state.array.slice().sort((a,b) => a - b);\n        const sortedArray = sortingAlgorithms.mergeSort(this.state.array);\n        // console.log(this.state.array)\n        // console.log(sortedArray)\n        // console.log(javaScriptSortedArray)\n        console.log(arraysAreEqual(javaScriptSortedArray, sortedArray));\n    }\n\n    quickSort() {}\n\n    heapSort() {}\n\n    bubbleSort() {}\n\n    testSortingAlgorithms() {\n        for (let i = 0; i < 100; i++) {\n            const array = [];\n            const length = randomIntFromInterval(1, 1000);\n            for (let i = 0; i < length; i++) {\n                array.push(randomIntFromInterval(-1000, 1000));\n            }\n            const javaScriptSortedArray = array.slice().sort((a,b) => a - b);\n            const mergeSortedArray = sortingAlgorithms.mergeSort(array.slice());\n            console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\n        }\n    }\n\n    render() {\n        const {array} = this.state;\n\n        return (\n            <div className=\"array-container\">\n                {array.map((value, idx) => (\n                    <div \n                        className=\"array-bar\" \n                        key={idx}\n                        style={{height: `${value}px`}}>\n                        \n                    </div>\n                ))}\n                <div className=\"btn\">\n                    <button \n                        className=\"reset\"\n                        onClick={() => this.resetArray()}>Generate New Array\n                    </button>\n                    <button \n                        className=\"mergeSort\"\n                        onClick={() => this.mergeSort()}>\n                        Merge Sort\n                    </button>\n                    <button \n                        className=\"quickSort\"\n                        onClick={() => this.quickSort()}>\n                        Quick Sort\n                    </button>\n                    <button \n                        className=\"heapSort\"\n                        onClick={() => this.heapSort()}>\n                        Heap Sort\n                    </button>\n                    <button \n                        className=\"bubbleSort\"\n                        onClick={() => this.bubbleSort()}>\n                        Bubble Sort\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction randomIntFromInterval(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n    if (arrayOne.length !== arrayTwo.length) return false;\n    for (let i = 0; i < arrayOne.length; i++) {\n        if (arrayOne[i] !== arrayTwo[i]) return false;\n    }\n    return true;\n}"]},"metadata":{},"sourceType":"module"}