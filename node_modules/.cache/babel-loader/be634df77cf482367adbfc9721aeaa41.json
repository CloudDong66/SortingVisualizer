{"ast":null,"code":"var _jsxFileName = \"/Users/clouddong/Dev/sorting_visualizer/src/SortingVisualizer/SortingVisualizer.jsx\";\nimport { Component } from 'react';\nimport './SortingVisualizer.css';\nimport { getMergeSortAnimations } from '../sortingAlgorithms/mergeSort';\nimport { getQuickSortAnimations } from '../sortingAlgorithms/quickSort';\nimport { getHeapSortAnimations } from '../sortingAlgorithms/heapSort';\nimport { getBubbleSortAnimations } from '../sortingAlgorithms/bubbleSort';\nimport { getInsertionSortAnimations } from '../sortingAlgorithms/insertionSort';\nimport { getSelectionSortAnimations } from '../sortingAlgorithms/selectionSort'; // animation speed\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet ANIMATION_SPEED_MS = 1; // numbers of bars being sorted\n\nconst NUMBER_OF_ARRAY_BARS = 200; // bars color\n\nconst PRIMARY_COLOR = 'pink'; // colors of bars been compared during the animation\n\nconst SECONDARY_COLOR = '#1b874d';\nexport default class SortingVisualizer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: []\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(5, 500));\n    }\n\n    this.setState({\n      array\n    });\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  quickSort() {\n    const animations = getQuickSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, barTwoIdx] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          const barTwoStyle = arrayBars[barTwoIdx].style;\n          const tempHeight = barOneStyle.height;\n          barOneStyle.height = barTwoStyle.height;\n          barTwoStyle.height = tempHeight;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  heapSort() {\n    const animations = getHeapSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, barTwoIdx] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          const barTwoStyle = arrayBars[barTwoIdx].style;\n          const tempHeight = barOneStyle.height;\n          barOneStyle.height = barTwoStyle.height;\n          barTwoStyle.height = tempHeight;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  bubbleSort() {\n    const animations = getBubbleSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, barTwoIdx] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          const barTwoStyle = arrayBars[barTwoIdx].style;\n          const tempHeight = barOneStyle.height;\n          barOneStyle.height = barTwoStyle.height;\n          barTwoStyle.height = tempHeight;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  insertionSort() {\n    const animations = getInsertionSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, barTwoIdx] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          const barTwoStyle = arrayBars[barTwoIdx].style;\n          const tempHeight = barOneStyle.height;\n          barOneStyle.height = barTwoStyle.height;\n          barTwoStyle.height = tempHeight;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  selectionSort() {\n    const animations = getSelectionSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, barTwoIdx] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          const barTwoStyle = arrayBars[barTwoIdx].style;\n          const tempHeight = barOneStyle.height;\n          barOneStyle.height = barTwoStyle.height;\n          barTwoStyle.height = tempHeight;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  setSpeed() {\n    ANIMATION_SPEED_MS = 20;\n  }\n\n  testSortingAlgorithms() {\n    for (let i = 0; i < 100; i++) {\n      const array = [];\n      const length = randomIntFromInterval(1, 1000);\n\n      for (let i = 0; i < length; i++) {\n        array.push(randomIntFromInterval(-1000, 1000));\n      }\n\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n      const heapSortedArray = getSelectionSortAnimations(array.slice()); // console.log(array.slice())\n\n      console.log(arraysAreEqual(javaScriptSortedArray, heapSortedArray));\n    }\n  }\n\n  render() {\n    const {\n      array\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"array-container\",\n      children: [array.map((value, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"array-bar\",\n        style: {\n          height: `${value}px`\n        }\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        \"data-testid\": \"gen-btn\",\n        className: \"btn\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.resetArray(),\n          children: \"Generate New Array\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.mergeSort(),\n          children: \"Merge Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.quickSort(),\n          children: \"Quick Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.heapSort(),\n          children: \"Heap Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.bubbleSort(),\n          children: \"Bubble Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.insertionSort(),\n          children: \"Insertion Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.selectionSort(),\n          children: \"Selection Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.toggle,\n          children: \"Set Speed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 13\n    }, this);\n  }\n\n}\nexport function randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\nexport function arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) return false;\n  }\n\n  return true;\n} // const javaScriptSortedArray = this.state.array.slice().sort((a,b) => a-b);\n//         const sortedArray = getQuickSortAnimations(this.state.array);\n//         console.log(this.state.array)\n//         console.log(sortedArray);\n//         console.log(arraysAreEqual(javaScriptSortedArray,sortedArray));","map":{"version":3,"sources":["/Users/clouddong/Dev/sorting_visualizer/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["Component","getMergeSortAnimations","getQuickSortAnimations","getHeapSortAnimations","getBubbleSortAnimations","getInsertionSortAnimations","getSelectionSortAnimations","ANIMATION_SPEED_MS","NUMBER_OF_ARRAY_BARS","PRIMARY_COLOR","SECONDARY_COLOR","SortingVisualizer","constructor","props","state","array","componentDidMount","resetArray","i","push","randomIntFromInterval","setState","mergeSort","animations","length","arrayBars","document","getElementsByClassName","isColorChange","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","quickSort","tempHeight","heapSort","bubbleSort","insertionSort","selectionSort","setSpeed","testSortingAlgorithms","javaScriptSortedArray","slice","sort","a","b","heapSortedArray","console","log","arraysAreEqual","render","map","value","idx","toggle","min","max","Math","floor","random","arrayOne","arrayTwo"],"mappings":";AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAO,yBAAP;AACA,SAASC,sBAAT,QAAuC,gCAAvC;AACA,SAASC,sBAAT,QAAuC,gCAAvC;AACA,SAASC,qBAAT,QAAsC,+BAAtC;AACA,SAASC,uBAAT,QAAwC,iCAAxC;AACA,SAASC,0BAAT,QAA2C,oCAA3C;AACA,SAASC,0BAAT,QAA2C,oCAA3C,C,CAGA;;;AACA,IAAIC,kBAAkB,GAAG,CAAzB,C,CAEA;;AACA,MAAMC,oBAAoB,GAAG,GAA7B,C,CAEA;;AACA,MAAMC,aAAa,GAAG,MAAtB,C,CAEA;;AACA,MAAMC,eAAe,GAAG,SAAxB;AAEA,eAAe,MAAMC,iBAAN,SAAgCX,SAAhC,CAA0C;AACrDY,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE;AADE,KAAb;AAGH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,UAAL;AACH;;AAEDA,EAAAA,UAAU,GAAG;AACT,UAAMF,KAAK,GAAG,EAAd;;AACA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,oBAApB,EAA0CU,CAAC,EAA3C,EAA+C;AAC3CH,MAAAA,KAAK,CAACI,IAAN,CAAWC,qBAAqB,CAAC,CAAD,EAAG,GAAH,CAAhC;AACH;;AACD,SAAKC,QAAL,CAAc;AAACN,MAAAA;AAAD,KAAd;AACH;;AAEDO,EAAAA,SAAS,GAAG;AACR,UAAMC,UAAU,GAAGtB,sBAAsB,CAAC,KAAKa,KAAL,CAAWC,KAAZ,CAAzC;;AACA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGK,UAAU,CAACC,MAA/B,EAAuCN,CAAC,EAAxC,EAA4C;AACxC,YAAMO,SAAS,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,WAAhC,CAAlB;AACA,YAAMC,aAAa,GAAGV,CAAC,GAAG,CAAJ,KAAU,CAAhC;;AACA,UAAIU,aAAJ,EAAmB;AACf,cAAM,CAACC,SAAD,EAAYC,SAAZ,IAAyBP,UAAU,CAACL,CAAD,CAAzC;AACA,cAAMa,WAAW,GAAGN,SAAS,CAACI,SAAD,CAAT,CAAqBG,KAAzC;AACA,cAAMC,WAAW,GAAGR,SAAS,CAACK,SAAD,CAAT,CAAqBE,KAAzC;AACA,cAAME,KAAK,GAAGhB,CAAC,GAAG,CAAJ,KAAU,CAAV,GAAcR,eAAd,GAAgCD,aAA9C;AACA0B,QAAAA,UAAU,CAAC,MAAM;AACbJ,UAAAA,WAAW,CAACK,eAAZ,GAA8BF,KAA9B;AACAD,UAAAA,WAAW,CAACG,eAAZ,GAA8BF,KAA9B;AACH,SAHS,EAGPhB,CAAC,GAAGX,kBAHG,CAAV;AAIH,OATD,MASO;AACH4B,QAAAA,UAAU,CAAC,MAAM;AACb,gBAAM,CAACN,SAAD,EAAYQ,SAAZ,IAAyBd,UAAU,CAACL,CAAD,CAAzC;AACA,gBAAMa,WAAW,GAAGN,SAAS,CAACI,SAAD,CAAT,CAAqBG,KAAzC;AACAD,UAAAA,WAAW,CAACO,MAAZ,GAAsB,GAAED,SAAU,IAAlC;AACH,SAJS,EAIPnB,CAAC,GAAGX,kBAJG,CAAV;AAKH;AACJ;AACJ;;AAEDgC,EAAAA,SAAS,GAAG;AACR,UAAMhB,UAAU,GAAGrB,sBAAsB,CAAC,KAAKY,KAAL,CAAWC,KAAZ,CAAzC;;AACA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGK,UAAU,CAACC,MAA/B,EAAuCN,CAAC,EAAxC,EAA4C;AACxC,YAAMO,SAAS,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,WAAhC,CAAlB;AACA,YAAMC,aAAa,GAAGV,CAAC,GAAG,CAAJ,KAAU,CAAhC;;AACA,UAAIU,aAAJ,EAAmB;AACf,cAAM,CAACC,SAAD,EAAYC,SAAZ,IAAyBP,UAAU,CAACL,CAAD,CAAzC;AACA,cAAMa,WAAW,GAAGN,SAAS,CAACI,SAAD,CAAT,CAAqBG,KAAzC;AACA,cAAMC,WAAW,GAAGR,SAAS,CAACK,SAAD,CAAT,CAAqBE,KAAzC;AACA,cAAME,KAAK,GAAGhB,CAAC,GAAG,CAAJ,KAAU,CAAV,GAAcR,eAAd,GAAgCD,aAA9C;AACA0B,QAAAA,UAAU,CAAC,MAAM;AACbJ,UAAAA,WAAW,CAACK,eAAZ,GAA8BF,KAA9B;AACAD,UAAAA,WAAW,CAACG,eAAZ,GAA8BF,KAA9B;AACH,SAHS,EAGPhB,CAAC,GAAGX,kBAHG,CAAV;AAIH,OATD,MASO;AACH4B,QAAAA,UAAU,CAAC,MAAM;AACb,gBAAM,CAACN,SAAD,EAAYC,SAAZ,IAAyBP,UAAU,CAACL,CAAD,CAAzC;AACA,gBAAMa,WAAW,GAAGN,SAAS,CAACI,SAAD,CAAT,CAAqBG,KAAzC;AACA,gBAAMC,WAAW,GAAGR,SAAS,CAACK,SAAD,CAAT,CAAqBE,KAAzC;AACA,gBAAMQ,UAAU,GAAGT,WAAW,CAACO,MAA/B;AACAP,UAAAA,WAAW,CAACO,MAAZ,GAAqBL,WAAW,CAACK,MAAjC;AACAL,UAAAA,WAAW,CAACK,MAAZ,GAAqBE,UAArB;AACH,SAPS,EAOPtB,CAAC,GAAGX,kBAPG,CAAV;AAQH;AACJ;AACJ;;AAEDkC,EAAAA,QAAQ,GAAG;AACP,UAAMlB,UAAU,GAAGpB,qBAAqB,CAAC,KAAKW,KAAL,CAAWC,KAAZ,CAAxC;;AACA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGK,UAAU,CAACC,MAA/B,EAAuCN,CAAC,EAAxC,EAA4C;AACxC,YAAMO,SAAS,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,WAAhC,CAAlB;AACA,YAAMC,aAAa,GAAGV,CAAC,GAAG,CAAJ,KAAU,CAAhC;;AACA,UAAIU,aAAJ,EAAmB;AACf,cAAM,CAACC,SAAD,EAAYC,SAAZ,IAAyBP,UAAU,CAACL,CAAD,CAAzC;AACA,cAAMa,WAAW,GAAGN,SAAS,CAACI,SAAD,CAAT,CAAqBG,KAAzC;AACA,cAAMC,WAAW,GAAGR,SAAS,CAACK,SAAD,CAAT,CAAqBE,KAAzC;AACA,cAAME,KAAK,GAAGhB,CAAC,GAAG,CAAJ,KAAU,CAAV,GAAcR,eAAd,GAAgCD,aAA9C;AACA0B,QAAAA,UAAU,CAAC,MAAM;AACbJ,UAAAA,WAAW,CAACK,eAAZ,GAA8BF,KAA9B;AACAD,UAAAA,WAAW,CAACG,eAAZ,GAA8BF,KAA9B;AACH,SAHS,EAGPhB,CAAC,GAAGX,kBAHG,CAAV;AAIH,OATD,MASO;AACH4B,QAAAA,UAAU,CAAC,MAAM;AACb,gBAAM,CAACN,SAAD,EAAYC,SAAZ,IAAyBP,UAAU,CAACL,CAAD,CAAzC;AACA,gBAAMa,WAAW,GAAGN,SAAS,CAACI,SAAD,CAAT,CAAqBG,KAAzC;AACA,gBAAMC,WAAW,GAAGR,SAAS,CAACK,SAAD,CAAT,CAAqBE,KAAzC;AACA,gBAAMQ,UAAU,GAAGT,WAAW,CAACO,MAA/B;AACAP,UAAAA,WAAW,CAACO,MAAZ,GAAqBL,WAAW,CAACK,MAAjC;AACAL,UAAAA,WAAW,CAACK,MAAZ,GAAqBE,UAArB;AACH,SAPS,EAOPtB,CAAC,GAAGX,kBAPG,CAAV;AAQH;AACJ;AACJ;;AAEDmC,EAAAA,UAAU,GAAG;AACT,UAAMnB,UAAU,GAAGnB,uBAAuB,CAAC,KAAKU,KAAL,CAAWC,KAAZ,CAA1C;;AACA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGK,UAAU,CAACC,MAA/B,EAAuCN,CAAC,EAAxC,EAA4C;AACxC,YAAMO,SAAS,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,WAAhC,CAAlB;AACA,YAAMC,aAAa,GAAGV,CAAC,GAAG,CAAJ,KAAU,CAAhC;;AACA,UAAIU,aAAJ,EAAmB;AACf,cAAM,CAACC,SAAD,EAAYC,SAAZ,IAAyBP,UAAU,CAACL,CAAD,CAAzC;AACA,cAAMa,WAAW,GAAGN,SAAS,CAACI,SAAD,CAAT,CAAqBG,KAAzC;AACA,cAAMC,WAAW,GAAGR,SAAS,CAACK,SAAD,CAAT,CAAqBE,KAAzC;AACA,cAAME,KAAK,GAAGhB,CAAC,GAAG,CAAJ,KAAU,CAAV,GAAcR,eAAd,GAAgCD,aAA9C;AACA0B,QAAAA,UAAU,CAAC,MAAM;AACbJ,UAAAA,WAAW,CAACK,eAAZ,GAA8BF,KAA9B;AACAD,UAAAA,WAAW,CAACG,eAAZ,GAA8BF,KAA9B;AACH,SAHS,EAGPhB,CAAC,GAAGX,kBAHG,CAAV;AAIH,OATD,MASO;AACH4B,QAAAA,UAAU,CAAC,MAAM;AACb,gBAAM,CAACN,SAAD,EAAYC,SAAZ,IAAyBP,UAAU,CAACL,CAAD,CAAzC;AACA,gBAAMa,WAAW,GAAGN,SAAS,CAACI,SAAD,CAAT,CAAqBG,KAAzC;AACA,gBAAMC,WAAW,GAAGR,SAAS,CAACK,SAAD,CAAT,CAAqBE,KAAzC;AACA,gBAAMQ,UAAU,GAAGT,WAAW,CAACO,MAA/B;AACAP,UAAAA,WAAW,CAACO,MAAZ,GAAqBL,WAAW,CAACK,MAAjC;AACAL,UAAAA,WAAW,CAACK,MAAZ,GAAqBE,UAArB;AACH,SAPS,EAOPtB,CAAC,GAAGX,kBAPG,CAAV;AAQH;AACJ;AACJ;;AAEDoC,EAAAA,aAAa,GAAG;AACZ,UAAMpB,UAAU,GAAGlB,0BAA0B,CAAC,KAAKS,KAAL,CAAWC,KAAZ,CAA7C;;AACA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGK,UAAU,CAACC,MAA/B,EAAuCN,CAAC,EAAxC,EAA4C;AACxC,YAAMO,SAAS,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,WAAhC,CAAlB;AACA,YAAMC,aAAa,GAAGV,CAAC,GAAG,CAAJ,KAAU,CAAhC;;AACA,UAAIU,aAAJ,EAAmB;AACf,cAAM,CAACC,SAAD,EAAYC,SAAZ,IAAyBP,UAAU,CAACL,CAAD,CAAzC;AACA,cAAMa,WAAW,GAAGN,SAAS,CAACI,SAAD,CAAT,CAAqBG,KAAzC;AACA,cAAMC,WAAW,GAAGR,SAAS,CAACK,SAAD,CAAT,CAAqBE,KAAzC;AACA,cAAME,KAAK,GAAGhB,CAAC,GAAG,CAAJ,KAAU,CAAV,GAAcR,eAAd,GAAgCD,aAA9C;AACA0B,QAAAA,UAAU,CAAC,MAAM;AACbJ,UAAAA,WAAW,CAACK,eAAZ,GAA8BF,KAA9B;AACAD,UAAAA,WAAW,CAACG,eAAZ,GAA8BF,KAA9B;AACH,SAHS,EAGPhB,CAAC,GAAGX,kBAHG,CAAV;AAIH,OATD,MASO;AACH4B,QAAAA,UAAU,CAAC,MAAM;AACb,gBAAM,CAACN,SAAD,EAAYC,SAAZ,IAAyBP,UAAU,CAACL,CAAD,CAAzC;AACA,gBAAMa,WAAW,GAAGN,SAAS,CAACI,SAAD,CAAT,CAAqBG,KAAzC;AACA,gBAAMC,WAAW,GAAGR,SAAS,CAACK,SAAD,CAAT,CAAqBE,KAAzC;AACA,gBAAMQ,UAAU,GAAGT,WAAW,CAACO,MAA/B;AACAP,UAAAA,WAAW,CAACO,MAAZ,GAAqBL,WAAW,CAACK,MAAjC;AACAL,UAAAA,WAAW,CAACK,MAAZ,GAAqBE,UAArB;AACH,SAPS,EAOPtB,CAAC,GAAGX,kBAPG,CAAV;AAQH;AACJ;AACJ;;AAEDqC,EAAAA,aAAa,GAAG;AACZ,UAAMrB,UAAU,GAAGjB,0BAA0B,CAAC,KAAKQ,KAAL,CAAWC,KAAZ,CAA7C;;AACA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGK,UAAU,CAACC,MAA/B,EAAuCN,CAAC,EAAxC,EAA4C;AACxC,YAAMO,SAAS,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,WAAhC,CAAlB;AACA,YAAMC,aAAa,GAAGV,CAAC,GAAG,CAAJ,KAAU,CAAhC;;AACA,UAAIU,aAAJ,EAAmB;AACf,cAAM,CAACC,SAAD,EAAYC,SAAZ,IAAyBP,UAAU,CAACL,CAAD,CAAzC;AACA,cAAMa,WAAW,GAAGN,SAAS,CAACI,SAAD,CAAT,CAAqBG,KAAzC;AACA,cAAMC,WAAW,GAAGR,SAAS,CAACK,SAAD,CAAT,CAAqBE,KAAzC;AACA,cAAME,KAAK,GAAGhB,CAAC,GAAG,CAAJ,KAAU,CAAV,GAAcR,eAAd,GAAgCD,aAA9C;AACA0B,QAAAA,UAAU,CAAC,MAAM;AACbJ,UAAAA,WAAW,CAACK,eAAZ,GAA8BF,KAA9B;AACAD,UAAAA,WAAW,CAACG,eAAZ,GAA8BF,KAA9B;AACH,SAHS,EAGPhB,CAAC,GAAGX,kBAHG,CAAV;AAIH,OATD,MASO;AACH4B,QAAAA,UAAU,CAAC,MAAM;AACb,gBAAM,CAACN,SAAD,EAAYC,SAAZ,IAAyBP,UAAU,CAACL,CAAD,CAAzC;AACA,gBAAMa,WAAW,GAAGN,SAAS,CAACI,SAAD,CAAT,CAAqBG,KAAzC;AACA,gBAAMC,WAAW,GAAGR,SAAS,CAACK,SAAD,CAAT,CAAqBE,KAAzC;AACA,gBAAMQ,UAAU,GAAGT,WAAW,CAACO,MAA/B;AACAP,UAAAA,WAAW,CAACO,MAAZ,GAAqBL,WAAW,CAACK,MAAjC;AACAL,UAAAA,WAAW,CAACK,MAAZ,GAAqBE,UAArB;AACH,SAPS,EAOPtB,CAAC,GAAGX,kBAPG,CAAV;AAQH;AACJ;AACJ;;AAEDsC,EAAAA,QAAQ,GAAG;AACPtC,IAAAA,kBAAkB,GAAG,EAArB;AACH;;AAEDuC,EAAAA,qBAAqB,GAAG;AACpB,SAAK,IAAI5B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,GAApB,EAAyBA,CAAC,EAA1B,EAA8B;AAC1B,YAAMH,KAAK,GAAG,EAAd;AACA,YAAMS,MAAM,GAAGJ,qBAAqB,CAAC,CAAD,EAAI,IAAJ,CAApC;;AACA,WAAK,IAAIF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGM,MAApB,EAA4BN,CAAC,EAA7B,EAAiC;AAC7BH,QAAAA,KAAK,CAACI,IAAN,CAAWC,qBAAqB,CAAC,CAAC,IAAF,EAAQ,IAAR,CAAhC;AACH;;AACD,YAAM2B,qBAAqB,GAAGhC,KAAK,CAACiC,KAAN,GAAcC,IAAd,CAAmB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAAjC,CAA9B;AACA,YAAMC,eAAe,GAAG9C,0BAA0B,CAACS,KAAK,CAACiC,KAAN,EAAD,CAAlD,CAP0B,CAQ1B;;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAYC,cAAc,CAACR,qBAAD,EAAwBK,eAAxB,CAA1B;AACH;AACJ;;AAEDI,EAAAA,MAAM,GAAG;AACL,UAAM;AAACzC,MAAAA;AAAD,QAAU,KAAKD,KAArB;AAEA,wBAEI;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA,iBAEKC,KAAK,CAAC0C,GAAN,CAAU,CAACC,KAAD,EAAQC,GAAR,kBACP;AACI,QAAA,SAAS,EAAC,WADd;AAGI,QAAA,KAAK,EAAE;AAACrB,UAAAA,MAAM,EAAG,GAAEoB,KAAM;AAAlB;AAHX,SAESC,GAFT;AAAA;AAAA;AAAA;AAAA,cADH,CAFL,eAUI;AAAK,uBAAY,SAAjB;AAA2B,QAAA,SAAS,EAAC,KAArC;AAAA,gCACI;AAAQ,UAAA,OAAO,EAAE,MAAM,KAAK1C,UAAL,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAII;AAAQ,UAAA,OAAO,EAAE,MAAM,KAAKK,SAAL,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ,eAOI;AAAQ,UAAA,OAAO,EAAE,MAAM,KAAKiB,SAAL,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPJ,eAUI;AAAQ,UAAA,OAAO,EAAE,MAAM,KAAKE,QAAL,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAVJ,eAaI;AAAQ,UAAA,OAAO,EAAE,MAAM,KAAKC,UAAL,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAbJ,eAgBI;AAAQ,UAAA,OAAO,EAAE,MAAM,KAAKC,aAAL,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAhBJ,eAmBI;AAAQ,UAAA,OAAO,EAAE,MAAM,KAAKC,aAAL,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAnBJ,eAsBI;AAAQ,UAAA,OAAO,EAAE,KAAKgB,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAtBJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAyCH;;AAlPoD;AAqPzD,OAAO,SAASxC,qBAAT,CAA+ByC,GAA/B,EAAoCC,GAApC,EAAyC;AAC5C,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBH,GAAG,GAAGD,GAAN,GAAY,CAA7B,IAAkCA,GAA7C,CAAP;AACH;AAED,OAAO,SAASN,cAAT,CAAwBW,QAAxB,EAAkCC,QAAlC,EAA4C;AAC/C,MAAID,QAAQ,CAAC1C,MAAT,KAAoB2C,QAAQ,CAAC3C,MAAjC,EAAyC,OAAO,KAAP;;AACzC,OAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgD,QAAQ,CAAC1C,MAA7B,EAAqCN,CAAC,EAAtC,EAA0C;AACtC,QAAIgD,QAAQ,CAAChD,CAAD,CAAR,KAAgBiD,QAAQ,CAACjD,CAAD,CAA5B,EAAiC,OAAO,KAAP;AACpC;;AACD,SAAO,IAAP;AACH,C,CAED;AACA;AACA;AACA;AACA","sourcesContent":["import { Component } from 'react';\nimport './SortingVisualizer.css';\nimport { getMergeSortAnimations } from '../sortingAlgorithms/mergeSort';\nimport { getQuickSortAnimations } from '../sortingAlgorithms/quickSort';\nimport { getHeapSortAnimations } from '../sortingAlgorithms/heapSort';\nimport { getBubbleSortAnimations } from '../sortingAlgorithms/bubbleSort';\nimport { getInsertionSortAnimations } from '../sortingAlgorithms/insertionSort';\nimport { getSelectionSortAnimations } from '../sortingAlgorithms/selectionSort';\n\n\n// animation speed\nlet ANIMATION_SPEED_MS = 1;\n\n// numbers of bars being sorted\nconst NUMBER_OF_ARRAY_BARS = 200;\n\n// bars color\nconst PRIMARY_COLOR = 'pink';\n\n// colors of bars been compared during the animation\nconst SECONDARY_COLOR = '#1b874d';\n\nexport default class SortingVisualizer extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            array: [],\n        };\n    }\n\n    componentDidMount() {\n        this.resetArray();\n    }\n\n    resetArray() {\n        const array = [];\n        for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n            array.push(randomIntFromInterval(5,500));\n        }\n        this.setState({array});\n    }\n\n    mergeSort() {\n        const animations = getMergeSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            const isColorChange = i % 3 !== 2;\n            if (isColorChange) {\n                const [barOneIdx, barTwoIdx] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i * ANIMATION_SPEED_MS);\n            } else {\n                setTimeout(() => {\n                    const [barOneIdx, newHeight] = animations[i];\n                    const barOneStyle = arrayBars[barOneIdx].style;\n                    barOneStyle.height = `${newHeight}px`;\n                }, i * ANIMATION_SPEED_MS);\n            }\n        }\n    }\n\n    quickSort() {\n        const animations = getQuickSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            const isColorChange = i % 3 !== 2;\n            if (isColorChange) {\n                const [barOneIdx, barTwoIdx] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i * ANIMATION_SPEED_MS);\n            } else {\n                setTimeout(() => {\n                    const [barOneIdx, barTwoIdx] = animations[i];\n                    const barOneStyle = arrayBars[barOneIdx].style;\n                    const barTwoStyle = arrayBars[barTwoIdx].style;\n                    const tempHeight = barOneStyle.height;\n                    barOneStyle.height = barTwoStyle.height;\n                    barTwoStyle.height = tempHeight;\n                }, i * ANIMATION_SPEED_MS);\n            }\n        }\n    }\n\n    heapSort() {\n        const animations = getHeapSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            const isColorChange = i % 3 !== 2;\n            if (isColorChange) {\n                const [barOneIdx, barTwoIdx] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i * ANIMATION_SPEED_MS);\n            } else {\n                setTimeout(() => {\n                    const [barOneIdx, barTwoIdx] = animations[i];\n                    const barOneStyle = arrayBars[barOneIdx].style;\n                    const barTwoStyle = arrayBars[barTwoIdx].style;\n                    const tempHeight = barOneStyle.height;\n                    barOneStyle.height = barTwoStyle.height;\n                    barTwoStyle.height = tempHeight;\n                }, i * ANIMATION_SPEED_MS);\n            }\n        }\n    }\n\n    bubbleSort() {\n        const animations = getBubbleSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            const isColorChange = i % 3 !== 2;\n            if (isColorChange) {\n                const [barOneIdx, barTwoIdx] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i * ANIMATION_SPEED_MS);\n            } else {\n                setTimeout(() => {\n                    const [barOneIdx, barTwoIdx] = animations[i];\n                    const barOneStyle = arrayBars[barOneIdx].style;\n                    const barTwoStyle = arrayBars[barTwoIdx].style;\n                    const tempHeight = barOneStyle.height;\n                    barOneStyle.height = barTwoStyle.height;\n                    barTwoStyle.height = tempHeight;\n                }, i * ANIMATION_SPEED_MS);\n            }\n        }\n    }\n\n    insertionSort() {\n        const animations = getInsertionSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            const isColorChange = i % 3 !== 2;\n            if (isColorChange) {\n                const [barOneIdx, barTwoIdx] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i * ANIMATION_SPEED_MS);\n            } else {\n                setTimeout(() => {\n                    const [barOneIdx, barTwoIdx] = animations[i];\n                    const barOneStyle = arrayBars[barOneIdx].style;\n                    const barTwoStyle = arrayBars[barTwoIdx].style;\n                    const tempHeight = barOneStyle.height;\n                    barOneStyle.height = barTwoStyle.height;\n                    barTwoStyle.height = tempHeight;\n                }, i * ANIMATION_SPEED_MS);\n            }\n        }\n    }\n\n    selectionSort() {\n        const animations = getSelectionSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            const isColorChange = i % 3 !== 2;\n            if (isColorChange) {\n                const [barOneIdx, barTwoIdx] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i * ANIMATION_SPEED_MS);\n            } else {\n                setTimeout(() => {\n                    const [barOneIdx, barTwoIdx] = animations[i];\n                    const barOneStyle = arrayBars[barOneIdx].style;\n                    const barTwoStyle = arrayBars[barTwoIdx].style;\n                    const tempHeight = barOneStyle.height;\n                    barOneStyle.height = barTwoStyle.height;\n                    barTwoStyle.height = tempHeight;\n                }, i * ANIMATION_SPEED_MS);\n            }\n        }\n    }\n\n    setSpeed() {\n        ANIMATION_SPEED_MS = 20;\n    }\n\n    testSortingAlgorithms() {\n        for (let i = 0; i < 100; i++) {\n            const array = [];\n            const length = randomIntFromInterval(1, 1000);\n            for (let i = 0; i < length; i++) {\n                array.push(randomIntFromInterval(-1000, 1000));\n            }\n            const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n            const heapSortedArray = getSelectionSortAnimations(array.slice());\n            // console.log(array.slice())\n            console.log(arraysAreEqual(javaScriptSortedArray, heapSortedArray));\n        }\n    }\n\n    render() {\n        const {array} = this.state;\n\n        return (\n            \n            <div className=\"array-container\">\n                {/* <nav>Ur mom</nav> */}\n                {array.map((value, idx) => (\n                    <div \n                        className=\"array-bar\" \n                        key={idx}\n                        style={{height: `${value}px`}}>\n                        \n                    </div>\n                ))}\n                <div data-testid=\"gen-btn\" className=\"btn\">\n                    <button onClick={() => this.resetArray()}>\n                        Generate New Array\n                    </button>\n                    <button onClick={() => this.mergeSort()}>\n                        Merge Sort\n                    </button>\n                    <button onClick={() => this.quickSort()}>\n                        Quick Sort\n                    </button>\n                    <button onClick={() => this.heapSort()}>\n                        Heap Sort\n                    </button>\n                    <button onClick={() => this.bubbleSort()}>\n                        Bubble Sort\n                    </button>\n                    <button onClick={() => this.insertionSort()}>\n                        Insertion Sort\n                    </button>\n                    <button onClick={() => this.selectionSort()}>\n                        Selection Sort\n                    </button>\n                    <button onClick={this.toggle}>\n                        Set Speed \n                    </button>\n                    \n                </div>\n            </div>\n        );\n    }\n}\n\nexport function randomIntFromInterval(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport function arraysAreEqual(arrayOne, arrayTwo) {\n    if (arrayOne.length !== arrayTwo.length) return false;\n    for (let i = 0; i < arrayOne.length; i++) {\n        if (arrayOne[i] !== arrayTwo[i]) return false;\n    }\n    return true;\n}\n\n// const javaScriptSortedArray = this.state.array.slice().sort((a,b) => a-b);\n//         const sortedArray = getQuickSortAnimations(this.state.array);\n//         console.log(this.state.array)\n//         console.log(sortedArray);\n//         console.log(arraysAreEqual(javaScriptSortedArray,sortedArray));"]},"metadata":{},"sourceType":"module"}