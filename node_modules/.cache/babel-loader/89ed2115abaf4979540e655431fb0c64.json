{"ast":null,"code":"// export const mergeSort = array => {\n//     if (array.length === 1) return array;\n//     const middleIdx = Math.floor(array.length / 2);\n//     const firstHalf = mergeSort(array.slice(0, middleIdx));\n//     const secondHalf = mergeSort(array.slice(middleIdx));\n//     const sortedArray = [];\n//     let i = 0,\n//         j = 0;\n//     while (i < firstHalf.length && j < secondHalf.length) {\n//         if (firstHalf[i] < secondHalf[j]) {\n//             sortedArray.push(firstHalf[i++]);\n//         }\n//         else {\n//             sortedArray.push(secondHalf[j++]);\n//         }\n//     }\n//     while (i < firstHalf.length) sortedArray.push(firstHalf[i++]);\n//     while (j < secondHalf.length) sortedArray.push(secondHalf[j++]);\n//     return sortedArray;\n// };\nexport function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n}","map":{"version":3,"sources":["/Users/clouddong/Dev/sorting_visualizer/src/sortingAlgorithms/sortingAlgorithms.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,sBAAT,CAAgCC,KAAhC,EAAuC;AAC1C,QAAMC,UAAU,GAAG,EAAnB;AACA,MAAID,KAAK,CAACE,MAAN,IAAgB,CAApB,EAAuB,OAAOF,KAAP;AACvB,QAAMG,cAAc,GAAGH,KAAK,CAACI,KAAN,EAAvB;AACAC,EAAAA,eAAe,CAACL,KAAD,EAAQ,CAAR,EAAWA,KAAK,CAACE,MAAN,GAAe,CAA1B,EAA6BC,cAA7B,EAA6CF,UAA7C,CAAf;AACH","sourcesContent":["// export const mergeSort = array => {\n//     if (array.length === 1) return array;\n//     const middleIdx = Math.floor(array.length / 2);\n//     const firstHalf = mergeSort(array.slice(0, middleIdx));\n//     const secondHalf = mergeSort(array.slice(middleIdx));\n//     const sortedArray = [];\n//     let i = 0,\n//         j = 0;\n    \n//     while (i < firstHalf.length && j < secondHalf.length) {\n//         if (firstHalf[i] < secondHalf[j]) {\n//             sortedArray.push(firstHalf[i++]);\n//         }\n\n//         else {\n//             sortedArray.push(secondHalf[j++]);\n//         }\n//     }\n//     while (i < firstHalf.length) sortedArray.push(firstHalf[i++]);\n//     while (j < secondHalf.length) sortedArray.push(secondHalf[j++]);\n//     return sortedArray;\n// };\nexport function getMergeSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations)\n}"]},"metadata":{},"sourceType":"module"}