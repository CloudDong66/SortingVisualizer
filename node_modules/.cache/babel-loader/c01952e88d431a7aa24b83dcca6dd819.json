{"ast":null,"code":"export function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  Merge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction Merge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n\n  while (i <= middleIdx && j <= endIdx) {\n    animations.push([i, j]);\n    animations.push([i, j]);\n\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n\n  while (i <= middleIdx) {\n    animations.push([i, i]);\n    animations.push([i, i]);\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n\n  while (j <= endIdx) {\n    animations.push([j, j]);\n    animations.push([j, j]);\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n\n_c = Merge;\nexport function getQuickSortAnimations(array) {\n  const animations = [];\n  quickSortHelper(array, 0, array.length - 1, animations);\n  return animations;\n}\n\nfunction quickSortHelper(array, startIdx, endIdx, animations) {\n  if (startIdx >= endIdx) return;\n  const pivotIdx = startIdx;\n  let leftIdx = startIdx + 1;\n  let rightIdx = endIdx;\n\n  while (rightIdx >= leftIdx) {\n    if (array[leftIdx] > array[pivotIdx] && array[rightIdx] < array[pivotIdx]) {\n      animations.push([leftIdx, rightIdx]);\n      animations.push([leftIdx, rightIdx]);\n      animations.push([leftIdx, rightIdx]);\n      swap(leftIdx, rightIdx, array);\n    }\n\n    if (array[leftIdx] <= array[pivotIdx]) {\n      animations.push([leftIdx, pivotIdx]);\n      animations.push([leftIdx, pivotIdx]);\n      animations.push([rightIdx, rightIdx]);\n      leftIdx++;\n    }\n\n    if (array[rightIdx] >= array[pivotIdx]) {\n      animations.push([rightIdx, pivotIdx]);\n      animations.push([rightIdx, pivotIdx]);\n      animations.push([rightIdx, rightIdx]);\n      rightIdx--;\n    }\n  }\n\n  animations.push([pivotIdx, rightIdx]);\n  animations.push([pivotIdx, rightIdx]);\n  animations.push([pivotIdx, rightIdx]);\n  swap(pivotIdx, rightIdx, array);\n  const leftSubarrayIsSmaller = rightIdx - 1 - startIdx < endIdx - (rightIdx + 1);\n\n  if (leftSubarrayIsSmaller) {\n    quickSortHelper(array, startIdx, rightIdx - 1, animations);\n    quickSortHelper(array, rightIdx + 1, endIdx, animations);\n  } else {\n    quickSortHelper(array, rightIdx + 1, endIdx, animations);\n    quickSortHelper(array, startIdx, rightIdx - 1, animations);\n  }\n}\n\nexport function getHeapSortAnimations(array) {\n  buildMaxHeap(array);\n\n  for (let endIdx = array.length - 1; endIdx > 0; endIdx--) {\n    swap(0, endIdx - 1, array);\n    heapifyDown(0, endIdx - 1, array);\n  }\n\n  return array;\n}\n\nfunction buildMaxHeap(array) {\n  const firstParentIdx = Math.floor((array.length - 2) / 2);\n\n  for (let currentIdx = firstParentIdx; currentIdx >= 0; currentIdx--) {\n    heapifyDown(currentIdx, array.length - 1, array);\n  }\n}\n\nfunction heapifyDown(currentIdx, endIdx, heap) {\n  let childOneIdx = currentIdx * 2 + 1;\n\n  while (childOneIdx <= endIdx) {\n    const childTwoIdx = currentIdx * 2 + 2 <= endIdx ? currentIdx * 2 + 2 : -1;\n    let largestIdx;\n\n    if (childTwoIdx !== -1 && heap[childTwoIdx] > heap[childOneIdx]) {\n      largestIdx = childTwoIdx;\n    } else {\n      largestIdx = childOneIdx;\n    }\n\n    if (heap[largestIdx] > heap[currentIdx]) {\n      swap(currentIdx, largestIdx, heap);\n      currentIdx = largestIdx;\n      childOneIdx = currentIdx * 2 + 1;\n    } else {\n      return;\n    }\n  }\n}\n\nfunction swap(i, j, array) {\n  let temp = array[j];\n  array[j] = array[i];\n  array[i] = temp;\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Merge\");","map":{"version":3,"sources":["/Users/clouddong/Dev/sorting_visualizer/src/sortingAlgorithms/sortingAlgorithms.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","Merge","k","i","j","push","getQuickSortAnimations","quickSortHelper","pivotIdx","leftIdx","rightIdx","swap","leftSubarrayIsSmaller","getHeapSortAnimations","buildMaxHeap","heapifyDown","firstParentIdx","currentIdx","heap","childOneIdx","childTwoIdx","largestIdx","temp"],"mappings":"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","sourcesContent":["export function getMergeSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n}\n\n\nfunction mergeSortHelper(\n    mainArray,\n    startIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n) {\n    if (startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    Merge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction Merge(\n    mainArray,\n    startIdx,\n    middleIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n) {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n    while (i <= middleIdx && j <= endIdx) {\n        animations.push([i, j]);\n        animations.push([i, j]);\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n            animations.push([k, auxiliaryArray[i]]);\n            mainArray[k++] = auxiliaryArray[i++];\n        } else {\n            animations.push([k, auxiliaryArray[j]]);\n            mainArray[k++] = auxiliaryArray[j++];\n        }\n    }\n\n    while (i <= middleIdx) {\n        animations.push([i, i]);\n        animations.push([i, i]);\n        animations.push([k, auxiliaryArray[i]]);\n        mainArray[k++] = auxiliaryArray[i++];\n    }\n\n    while (j <= endIdx) {\n        animations.push([j, j]);\n        animations.push([j, j]);\n        animations.push([k, auxiliaryArray[j]]);\n        mainArray[k++] = auxiliaryArray[j++];\n    }\n}\n\n\nexport function getQuickSortAnimations(array) {\n    const animations = [];\n    quickSortHelper(array, 0, array.length - 1, animations);\n    return animations;\n}\n\nfunction quickSortHelper(array, startIdx, endIdx, animations) {\n    if (startIdx >= endIdx) return;\n    const pivotIdx = startIdx;\n    let leftIdx = startIdx + 1;\n    let rightIdx = endIdx;\n    while (rightIdx >= leftIdx) {\n        if (array[leftIdx] > array[pivotIdx] && array[rightIdx] < array[pivotIdx]) {\n            animations.push([leftIdx, rightIdx]);\n            animations.push([leftIdx, rightIdx]);\n            animations.push([leftIdx, rightIdx]);\n            swap(leftIdx, rightIdx, array);\n        }\n        if (array[leftIdx] <= array[pivotIdx]) {\n            animations.push([leftIdx, pivotIdx]);\n            animations.push([leftIdx, pivotIdx]);\n            animations.push([rightIdx, rightIdx]);\n            leftIdx++;\n        }\n        if (array[rightIdx] >= array[pivotIdx]) {\n            animations.push([rightIdx, pivotIdx]);\n            animations.push([rightIdx, pivotIdx]);\n            animations.push([rightIdx, rightIdx]);\n            rightIdx--;\n        }\n    }\n\n    \n    animations.push([pivotIdx, rightIdx]);\n    animations.push([pivotIdx, rightIdx]);\n    animations.push([pivotIdx, rightIdx]);\n    swap(pivotIdx, rightIdx, array);\n    const leftSubarrayIsSmaller = rightIdx - 1 - startIdx < endIdx - (rightIdx + 1);\n    if (leftSubarrayIsSmaller) {\n        quickSortHelper(array, startIdx, rightIdx - 1, animations);\n        quickSortHelper(array, rightIdx + 1, endIdx, animations);\n    } else {\n        quickSortHelper(array, rightIdx + 1, endIdx, animations);\n        quickSortHelper(array, startIdx, rightIdx - 1, animations);\n    }\n}\n\nexport function getHeapSortAnimations(array) {\n    buildMaxHeap(array);\n    for (let endIdx = array.length - 1; endIdx > 0; endIdx--) {\n        swap(0, endIdx - 1, array);\n        heapifyDown(0, endIdx - 1, array);\n    }\n    return array;\n}\n\nfunction buildMaxHeap(array) {\n    const firstParentIdx = Math.floor((array.length - 2) / 2);\n    for (let currentIdx = firstParentIdx; currentIdx >= 0; currentIdx--) {\n        heapifyDown(currentIdx, array.length - 1, array);\n    }\n}\n\nfunction heapifyDown(currentIdx, endIdx, heap) {\n    let childOneIdx = currentIdx * 2 + 1;\n    while(childOneIdx <= endIdx) {\n        const childTwoIdx = currentIdx * 2 + 2 <= endIdx ? currentIdx * 2 + 2 : -1;\n        let largestIdx;\n        if (childTwoIdx !== -1 && heap[childTwoIdx] > heap[childOneIdx]) {\n            largestIdx = childTwoIdx;\n        } else {\n            largestIdx = childOneIdx;\n        }\n        if (heap[largestIdx] > heap[currentIdx]) {\n            swap(currentIdx, largestIdx, heap);\n            currentIdx = largestIdx;\n            childOneIdx = currentIdx * 2 + 1;\n        } else {\n            return;\n        }\n    }\n}\n\nfunction swap(i, j, array) {\n    let temp = array[j];\n    array[j] = array[i];\n    array[i] = temp;\n}"]},"metadata":{},"sourceType":"module"}