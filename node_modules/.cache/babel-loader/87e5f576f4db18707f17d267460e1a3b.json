{"ast":null,"code":"export const mergeSort = array => {\n  if (array.length === 1) return array;\n  const middleIdx = Math.floor(array.length / 2);\n  const firstHalf = mergeSort(array.slice(0, middleIdx));\n  const secondHalf = mergeSort(array.slice(middleIdx));\n  const sortedArray = [];\n  let i = 0,\n      j = 0;\n\n  while (i < firstHalf.length && j < secondHalf.length) {\n    if (firstHalf[i] < secondHalf[j]) {\n      sortedArray.push(firstHalf[i++]);\n    } else {\n      sortedArray.push(secondHalf[j++]);\n    }\n  }\n\n  while (i < firstHalf.length) sortedArray.push(firstHalf[i++]);\n\n  while (j < secondHalf.length) sortedArray.push(secondHalf[j++]);\n\n  return sortedArray;\n};","map":{"version":3,"sources":["/Users/clouddong/Dev/sorting_visualizer/src/sortingAlgorithms/sortingAlgorithms.js"],"names":["mergeSort","array","length","middleIdx","Math","floor","firstHalf","slice","secondHalf","sortedArray","i","j","push"],"mappings":"AAAA,OAAO,MAAMA,SAAS,GAAGC,KAAK,IAAI;AAC9B,MAAIA,KAAK,CAACC,MAAN,KAAiB,CAArB,EAAwB,OAAOD,KAAP;AACxB,QAAME,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWJ,KAAK,CAACC,MAAN,GAAe,CAA1B,CAAlB;AACA,QAAMI,SAAS,GAAGN,SAAS,CAACC,KAAK,CAACM,KAAN,CAAY,CAAZ,EAAeJ,SAAf,CAAD,CAA3B;AACA,QAAMK,UAAU,GAAGR,SAAS,CAACC,KAAK,CAACM,KAAN,CAAYJ,SAAZ,CAAD,CAA5B;AACA,QAAMM,WAAW,GAAG,EAApB;AACA,MAAIC,CAAC,GAAG,CAAR;AAAA,MACIC,CAAC,GAAG,CADR;;AAGA,SAAOD,CAAC,GAAGJ,SAAS,CAACJ,MAAd,IAAwBS,CAAC,GAAGH,UAAU,CAACN,MAA9C,EAAsD;AAClD,QAAII,SAAS,CAACI,CAAD,CAAT,GAAeF,UAAU,CAACG,CAAD,CAA7B,EAAkC;AAC9BF,MAAAA,WAAW,CAACG,IAAZ,CAAiBN,SAAS,CAACI,CAAC,EAAF,CAA1B;AACH,KAFD,MAIK;AACDD,MAAAA,WAAW,CAACG,IAAZ,CAAiBJ,UAAU,CAACG,CAAC,EAAF,CAA3B;AACH;AACJ;;AACD,SAAOD,CAAC,GAAGJ,SAAS,CAACJ,MAArB,EAA6BO,WAAW,CAACG,IAAZ,CAAiBN,SAAS,CAACI,CAAC,EAAF,CAA1B;;AAC7B,SAAOC,CAAC,GAAGH,UAAU,CAACN,MAAtB,EAA8BO,WAAW,CAACG,IAAZ,CAAiBJ,UAAU,CAACG,CAAC,EAAF,CAA3B;;AAC9B,SAAOF,WAAP;AACH,CArBM","sourcesContent":["export const mergeSort = array => {\n    if (array.length === 1) return array;\n    const middleIdx = Math.floor(array.length / 2);\n    const firstHalf = mergeSort(array.slice(0, middleIdx));\n    const secondHalf = mergeSort(array.slice(middleIdx));\n    const sortedArray = [];\n    let i = 0,\n        j = 0;\n    \n    while (i < firstHalf.length && j < secondHalf.length) {\n        if (firstHalf[i] < secondHalf[j]) {\n            sortedArray.push(firstHalf[i++]);\n        }\n\n        else {\n            sortedArray.push(secondHalf[j++]);\n        }\n    }\n    while (i < firstHalf.length) sortedArray.push(firstHalf[i++]);\n    while (j < secondHalf.length) sortedArray.push(secondHalf[j++]);\n    return sortedArray;\n};"]},"metadata":{},"sourceType":"module"}